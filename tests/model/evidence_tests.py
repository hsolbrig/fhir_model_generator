#!/usr/bin/env python
# -*- coding: utf-8 -*-
#
#  Generated from FHIR 4.1.0-f80db8871 on 2019-11-18.
#  2019, SMART Health IT.


import os
import io
import unittest
import json
from model import evidence
from model.fhirdate import FHIRDate


class EvidenceTests(unittest.TestCase):
    def instantiate_from(self, filename):
        datadir = os.environ.get('FHIR_UNITTEST_DATADIR') or \
                  os.path.abspath(os.path.join(os.path.dirname(__file__), '..', '..', 'fhir-parser', 'downloads'))
        with io.open(os.path.join(datadir, filename), 'r', encoding='utf-8') as handle:
            js = json.load(handle)
            self.assertEqual("Evidence", js["resourceType"])
        return evidence.Evidence(js)

    def testEvidence1(self):
        inst = self.instantiate_from("evidence-example-mortalitylongterm-nocorticosteroids.json")
        self.assertIsNotNone(inst, "Must have instantiated a Evidence instance")
        self.implEvidence1(inst)

        js = inst.as_json()
        self.assertEqual("Evidence", js["resourceType"])
        inst2 = evidence.Evidence(js)
        self.implEvidence1(inst2)

    def implEvidence1(self, inst):
        self.assertEqual(inst.certainty[0].certaintySubcomponent[0].rating[0].coding[0].code, "no-concern")
        self.assertEqual(inst.certainty[0].certaintySubcomponent[0].rating[0].coding[0].display, "no serious concern")
        self.assertEqual(inst.certainty[0].certaintySubcomponent[0].rating[0].coding[0].system, "http://terminology.hl7.org/CodeSystem/certainty-subcomponent-rating")
        self.assertEqual(inst.certainty[0].certaintySubcomponent[0].type[0].coding[0].code, "RiskOfBias")
        self.assertEqual(inst.certainty[0].certaintySubcomponent[0].type[0].coding[0].display, "Risk of bias")
        self.assertEqual(inst.certainty[0].certaintySubcomponent[0].type[0].coding[0].system, "http://terminology.hl7.org/CodeSystem/certainty-subcomponent-type")
        self.assertEqual(inst.certainty[0].certaintySubcomponent[1].rating[0].coding[0].code, "no-concern")
        self.assertEqual(inst.certainty[0].certaintySubcomponent[1].rating[0].coding[0].display, "no serious concern")
        self.assertEqual(inst.certainty[0].certaintySubcomponent[1].rating[0].coding[0].system, "http://terminology.hl7.org/CodeSystem/certainty-subcomponent-rating")
        self.assertEqual(inst.certainty[0].certaintySubcomponent[1].type[0].coding[0].code, "Inconsistency")
        self.assertEqual(inst.certainty[0].certaintySubcomponent[1].type[0].coding[0].display, "Inconsistency")
        self.assertEqual(inst.certainty[0].certaintySubcomponent[1].type[0].coding[0].system, "http://terminology.hl7.org/CodeSystem/certainty-subcomponent-type")
        self.assertEqual(inst.certainty[0].certaintySubcomponent[2].note.text, "Only a small proportion of studies reported longer-term mortality.")
        self.assertEqual(inst.certainty[0].certaintySubcomponent[2].rating[0].coding[0].code, "serious-concern")
        self.assertEqual(inst.certainty[0].certaintySubcomponent[2].rating[0].coding[0].display, "serious concern")
        self.assertEqual(inst.certainty[0].certaintySubcomponent[2].rating[0].coding[0].system, "http://terminology.hl7.org/CodeSystem/certainty-subcomponent-rating")
        self.assertEqual(inst.certainty[0].certaintySubcomponent[2].type[0].coding[0].code, "Indirectness")
        self.assertEqual(inst.certainty[0].certaintySubcomponent[2].type[0].coding[0].display, "Indirectness")
        self.assertEqual(inst.certainty[0].certaintySubcomponent[2].type[0].coding[0].system, "http://terminology.hl7.org/CodeSystem/certainty-subcomponent-type")
        self.assertEqual(inst.certainty[0].certaintySubcomponent[3].note.text, "Confidence interval includes no effect.")
        self.assertEqual(inst.certainty[0].certaintySubcomponent[3].rating[0].coding[0].code, "serious-concern")
        self.assertEqual(inst.certainty[0].certaintySubcomponent[3].rating[0].coding[0].display, "serious concern")
        self.assertEqual(inst.certainty[0].certaintySubcomponent[3].rating[0].coding[0].system, "http://terminology.hl7.org/CodeSystem/certainty-subcomponent-rating")
        self.assertEqual(inst.certainty[0].certaintySubcomponent[3].type[0].coding[0].code, "Imprecision")
        self.assertEqual(inst.certainty[0].certaintySubcomponent[3].type[0].coding[0].display, "Imprecision")
        self.assertEqual(inst.certainty[0].certaintySubcomponent[3].type[0].coding[0].system, "http://terminology.hl7.org/CodeSystem/certainty-subcomponent-type")
        self.assertEqual(inst.certainty[0].certaintySubcomponent[4].rating[0].coding[0].code, "no-concern")
        self.assertEqual(inst.certainty[0].certaintySubcomponent[4].rating[0].coding[0].display, "no serious concern")
        self.assertEqual(inst.certainty[0].certaintySubcomponent[4].rating[0].coding[0].system, "http://terminology.hl7.org/CodeSystem/certainty-subcomponent-rating")
        self.assertEqual(inst.certainty[0].certaintySubcomponent[4].type[0].coding[0].code, "PublicationBias")
        self.assertEqual(inst.certainty[0].certaintySubcomponent[4].type[0].coding[0].display, "Publication bias")
        self.assertEqual(inst.certainty[0].certaintySubcomponent[4].type[0].coding[0].system, "http://terminology.hl7.org/CodeSystem/certainty-subcomponent-type")
        self.assertEqual(inst.certainty[0].description, "Low, due to serious imprecision and indirectness.")
        self.assertEqual(inst.certainty[0].rating[0].coding[0].code, "low")
        self.assertEqual(inst.certainty[0].rating[0].coding[0].display, "Low quality")
        self.assertEqual(inst.certainty[0].rating[0].coding[0].system, "http://terminology.hl7.org/CodeSystem/certainty-rating")
        self.assertEqual(inst.description, "Occurrence of Mortality with No corticosteroids for patients with sepsis")
        self.assertEqual(inst.id, "Evidence-Example-MortalityLongTerm-NoCorticosteroids")
        self.assertEqual(inst.meta.tag[0].code, "HTEST")
        self.assertEqual(inst.meta.tag[0].display, "test health data")
        self.assertEqual(inst.meta.tag[0].system, "http://terminology.hl7.org/CodeSystem/v3-ActReason")
        self.assertEqual(inst.referentGroup.description, "Patients with sepsis")
        self.assertEqual(inst.referentGroup.directnessMatch.coding[0].display, "???")
        self.assertEqual(inst.referentGroup.directnessMatch.coding[0].system, "http://terminology.hl7.org/CodeSystem/directness")
        self.assertEqual(inst.relatedArtifact[0].type, "derived-from")
        self.assertEqual(inst.relatedArtifact[0].url, "https://app.magicapp.org/public/guideline/EZ1w8n/pico/31831/widget?tab=outcome")
        self.assertEqual(inst.statistic[0].description, "371 per 1000")
        self.assertEqual(inst.statistic[0].note[0].text, "371 per 1000 experienced Mortality (60 days to 1 year)")
        self.assertEqual(inst.statistic[0].quantity.value, 0.371)
        self.assertEqual(inst.statistic[0].sampleSize.note[0].text, "Based on data from 6438 patients in 9 studies ")
        self.assertEqual(inst.statistic[0].sampleSize.numberOfParticipants, 6438)
        self.assertEqual(inst.statistic[0].sampleSize.numberOfStudies, 9)
        self.assertEqual(inst.statistic[0].statisticType.coding[0].code, "C44256")
        self.assertEqual(inst.statistic[0].statisticType.coding[0].display, "proportion")
        self.assertEqual(inst.statistic[0].statisticType.coding[0].system, "http://terminology.hl7.org/CodeSystem/statistic-type")
        self.assertEqual(inst.status, "draft")
        self.assertEqual(inst.studyType.coding[0].code, "RCT")
        self.assertEqual(inst.studyType.coding[0].display, "randomized trial")
        self.assertEqual(inst.studyType.coding[0].system, "http://terminology.hl7.org/CodeSystem/study-type")
        self.assertEqual(inst.synthesisType.coding[0].code, "std-MA")
        self.assertEqual(inst.synthesisType.coding[0].display, "summary data meta-analysis")
        self.assertEqual(inst.synthesisType.coding[0].system, "http://terminology.hl7.org/CodeSystem/synthesis-type")
        self.assertEqual(inst.text.status, "generated")
        self.assertEqual(inst.title, "No corticosteroids for Patients with Sepsis with Mortality (60 days to 1 year)")
        self.assertEqual(inst.variableDefinition[0].description, "Mortality Longer term (60 days to 1 year)")
        self.assertEqual(inst.variableDefinition[0].directnessMatch.coding[0].code, "moderate")
        self.assertEqual(inst.variableDefinition[0].directnessMatch.coding[0].display, "moderate")
        self.assertEqual(inst.variableDefinition[0].directnessMatch.coding[0].system, "http://terminology.hl7.org/CodeSystem/directness")
        self.assertEqual(inst.variableDefinition[0].variableRole.coding[0].code, "measuredVariable")
        self.assertEqual(inst.variableDefinition[0].variableRole.coding[0].display, "measured variable")
        self.assertEqual(inst.variableDefinition[0].variableRole.coding[0].system, "http://terminology.hl7.org/CodeSystem/variable-role")
        self.assertEqual(inst.variableDefinition[1].description, "No corticosteroids")
        self.assertEqual(inst.variableDefinition[1].directnessMatch.coding[0].display, "???")
        self.assertEqual(inst.variableDefinition[1].directnessMatch.coding[0].system, "http://terminology.hl7.org/CodeSystem/directness")
        self.assertEqual(inst.variableDefinition[1].variableRole.coding[0].code, "referenceExposure")
        self.assertEqual(inst.variableDefinition[1].variableRole.coding[0].display, "referenceExposure")
        self.assertEqual(inst.variableDefinition[1].variableRole.coding[0].system, "http://terminology.hl7.org/CodeSystem/variable-role")

    def testEvidence2(self):
        inst = self.instantiate_from("evidence-example-mortalitylongterm-corticosteroids.json")
        self.assertIsNotNone(inst, "Must have instantiated a Evidence instance")
        self.implEvidence2(inst)

        js = inst.as_json()
        self.assertEqual("Evidence", js["resourceType"])
        inst2 = evidence.Evidence(js)
        self.implEvidence2(inst2)

    def implEvidence2(self, inst):
        self.assertEqual(inst.certainty[0].certaintySubcomponent[0].rating[0].coding[0].code, "no-concern")
        self.assertEqual(inst.certainty[0].certaintySubcomponent[0].rating[0].coding[0].display, "no serious concern")
        self.assertEqual(inst.certainty[0].certaintySubcomponent[0].rating[0].coding[0].system, "http://terminology.hl7.org/CodeSystem/certainty-subcomponent-rating")
        self.assertEqual(inst.certainty[0].certaintySubcomponent[0].type[0].coding[0].code, "RiskOfBias")
        self.assertEqual(inst.certainty[0].certaintySubcomponent[0].type[0].coding[0].display, "Risk of bias")
        self.assertEqual(inst.certainty[0].certaintySubcomponent[0].type[0].coding[0].system, "http://terminology.hl7.org/CodeSystem/certainty-subcomponent-type")
        self.assertEqual(inst.certainty[0].certaintySubcomponent[1].rating[0].coding[0].code, "no-concern")
        self.assertEqual(inst.certainty[0].certaintySubcomponent[1].rating[0].coding[0].display, "no serious concern")
        self.assertEqual(inst.certainty[0].certaintySubcomponent[1].rating[0].coding[0].system, "http://terminology.hl7.org/CodeSystem/certainty-subcomponent-rating")
        self.assertEqual(inst.certainty[0].certaintySubcomponent[1].type[0].coding[0].code, "Inconsistency")
        self.assertEqual(inst.certainty[0].certaintySubcomponent[1].type[0].coding[0].display, "Inconsistency")
        self.assertEqual(inst.certainty[0].certaintySubcomponent[1].type[0].coding[0].system, "http://terminology.hl7.org/CodeSystem/certainty-subcomponent-type")
        self.assertEqual(inst.certainty[0].certaintySubcomponent[2].note.text, "Only a small proportion of studies reported longer-term mortality.")
        self.assertEqual(inst.certainty[0].certaintySubcomponent[2].rating[0].coding[0].code, "serious-concern")
        self.assertEqual(inst.certainty[0].certaintySubcomponent[2].rating[0].coding[0].display, "serious concern")
        self.assertEqual(inst.certainty[0].certaintySubcomponent[2].rating[0].coding[0].system, "http://terminology.hl7.org/CodeSystem/certainty-subcomponent-rating")
        self.assertEqual(inst.certainty[0].certaintySubcomponent[2].type[0].coding[0].code, "Indirectness")
        self.assertEqual(inst.certainty[0].certaintySubcomponent[2].type[0].coding[0].display, "Indirectness")
        self.assertEqual(inst.certainty[0].certaintySubcomponent[2].type[0].coding[0].system, "http://terminology.hl7.org/CodeSystem/certainty-subcomponent-type")
        self.assertEqual(inst.certainty[0].certaintySubcomponent[3].note.text, "Confidence interval includes no effect.")
        self.assertEqual(inst.certainty[0].certaintySubcomponent[3].rating[0].coding[0].code, "serious-concern")
        self.assertEqual(inst.certainty[0].certaintySubcomponent[3].rating[0].coding[0].display, "serious concern")
        self.assertEqual(inst.certainty[0].certaintySubcomponent[3].rating[0].coding[0].system, "http://terminology.hl7.org/CodeSystem/certainty-subcomponent-rating")
        self.assertEqual(inst.certainty[0].certaintySubcomponent[3].type[0].coding[0].code, "Imprecision")
        self.assertEqual(inst.certainty[0].certaintySubcomponent[3].type[0].coding[0].display, "Imprecision")
        self.assertEqual(inst.certainty[0].certaintySubcomponent[3].type[0].coding[0].system, "http://terminology.hl7.org/CodeSystem/certainty-subcomponent-type")
        self.assertEqual(inst.certainty[0].certaintySubcomponent[4].rating[0].coding[0].code, "no-concern")
        self.assertEqual(inst.certainty[0].certaintySubcomponent[4].rating[0].coding[0].display, "no serious concern")
        self.assertEqual(inst.certainty[0].certaintySubcomponent[4].rating[0].coding[0].system, "http://terminology.hl7.org/CodeSystem/certainty-subcomponent-rating")
        self.assertEqual(inst.certainty[0].certaintySubcomponent[4].type[0].coding[0].code, "PublicationBias")
        self.assertEqual(inst.certainty[0].certaintySubcomponent[4].type[0].coding[0].display, "Publication bias")
        self.assertEqual(inst.certainty[0].certaintySubcomponent[4].type[0].coding[0].system, "http://terminology.hl7.org/CodeSystem/certainty-subcomponent-type")
        self.assertEqual(inst.certainty[0].description, "Low, due to serious imprecision and indirectness.")
        self.assertEqual(inst.certainty[0].rating[0].coding[0].code, "low")
        self.assertEqual(inst.certainty[0].rating[0].coding[0].display, "Low quality")
        self.assertEqual(inst.certainty[0].rating[0].coding[0].system, "http://terminology.hl7.org/CodeSystem/certainty-rating")
        self.assertEqual(inst.description, "Occurrence of Mortality with Corticosteroids for patients with sepsis")
        self.assertEqual(inst.id, "Evidence-Example-MortalityLongTerm-Corticosteroids")
        self.assertEqual(inst.meta.tag[0].code, "HTEST")
        self.assertEqual(inst.meta.tag[0].display, "test health data")
        self.assertEqual(inst.meta.tag[0].system, "http://terminology.hl7.org/CodeSystem/v3-ActReason")
        self.assertEqual(inst.referentGroup.description, "Patients with sepsis")
        self.assertEqual(inst.referentGroup.directnessMatch.coding[0].display, "???")
        self.assertEqual(inst.referentGroup.directnessMatch.coding[0].system, "http://terminology.hl7.org/CodeSystem/directness")
        self.assertEqual(inst.relatedArtifact[0].type, "derived-from")
        self.assertEqual(inst.relatedArtifact[0].url, "https://app.magicapp.org/public/guideline/EZ1w8n/pico/31831/widget?tab=outcome")
        self.assertEqual(inst.statistic[0].description, "349 per 1000")
        self.assertEqual(inst.statistic[0].note[0].text, "349 per 1000 experienced Mortality (60 days to 1 year)")
        self.assertEqual(inst.statistic[0].quantity.value, 0.349)
        self.assertEqual(inst.statistic[0].sampleSize.note[0].text, "Based on data from 6438 patients in 9 studies ")
        self.assertEqual(inst.statistic[0].sampleSize.numberOfParticipants, 6438)
        self.assertEqual(inst.statistic[0].sampleSize.numberOfStudies, 9)
        self.assertEqual(inst.statistic[0].statisticType.coding[0].code, "C44256")
        self.assertEqual(inst.statistic[0].statisticType.coding[0].display, "proportion")
        self.assertEqual(inst.statistic[0].statisticType.coding[0].system, "http://terminology.hl7.org/CodeSystem/statistic-type")
        self.assertEqual(inst.status, "draft")
        self.assertEqual(inst.studyType.coding[0].code, "RCT")
        self.assertEqual(inst.studyType.coding[0].display, "randomized trial")
        self.assertEqual(inst.studyType.coding[0].system, "http://terminology.hl7.org/CodeSystem/study-type")
        self.assertEqual(inst.synthesisType.coding[0].code, "std-MA")
        self.assertEqual(inst.synthesisType.coding[0].display, "summary data meta-analysis")
        self.assertEqual(inst.synthesisType.coding[0].system, "http://terminology.hl7.org/CodeSystem/synthesis-type")
        self.assertEqual(inst.text.status, "generated")
        self.assertEqual(inst.title, "Corticosteroids for Patients with Sepsis with Mortality (60 days to 1 year)")
        self.assertEqual(inst.variableDefinition[0].description, "Mortality Longer term (60 days to 1 year)")
        self.assertEqual(inst.variableDefinition[0].directnessMatch.coding[0].code, "moderate")
        self.assertEqual(inst.variableDefinition[0].directnessMatch.coding[0].display, "moderate")
        self.assertEqual(inst.variableDefinition[0].directnessMatch.coding[0].system, "http://terminology.hl7.org/CodeSystem/directness")
        self.assertEqual(inst.variableDefinition[0].variableRole.coding[0].code, "measuredVariable")
        self.assertEqual(inst.variableDefinition[0].variableRole.coding[0].display, "measured variable")
        self.assertEqual(inst.variableDefinition[0].variableRole.coding[0].system, "http://terminology.hl7.org/CodeSystem/variable-role")
        self.assertEqual(inst.variableDefinition[1].description, "Corticosteroids")
        self.assertEqual(inst.variableDefinition[1].directnessMatch.coding[0].display, "???")
        self.assertEqual(inst.variableDefinition[1].directnessMatch.coding[0].system, "http://terminology.hl7.org/CodeSystem/directness")
        self.assertEqual(inst.variableDefinition[1].variableRole.coding[0].code, "exposure")
        self.assertEqual(inst.variableDefinition[1].variableRole.coding[0].display, "exposure")
        self.assertEqual(inst.variableDefinition[1].variableRole.coding[0].system, "http://terminology.hl7.org/CodeSystem/variable-role")

    def testEvidence3(self):
        inst = self.instantiate_from("evidence-example.json")
        self.assertIsNotNone(inst, "Must have instantiated a Evidence instance")
        self.implEvidence3(inst)

        js = inst.as_json()
        self.assertEqual("Evidence", js["resourceType"])
        inst2 = evidence.Evidence(js)
        self.implEvidence3(inst2)

    def implEvidence3(self, inst):
        self.assertEqual(inst.certainty[0].certaintySubcomponent[0].rating[0].coding[0].code, "no-concern")
        self.assertEqual(inst.certainty[0].certaintySubcomponent[0].rating[0].coding[0].display, "no serious concern")
        self.assertEqual(inst.certainty[0].certaintySubcomponent[0].rating[0].coding[0].system, "http://terminology.hl7.org/CodeSystem/certainty-subcomponent-rating")
        self.assertEqual(inst.certainty[0].certaintySubcomponent[0].type[0].coding[0].code, "RiskOfBias")
        self.assertEqual(inst.certainty[0].certaintySubcomponent[0].type[0].coding[0].display, "Risk of bias")
        self.assertEqual(inst.certainty[0].certaintySubcomponent[0].type[0].coding[0].system, "http://terminology.hl7.org/CodeSystem/certainty-subcomponent-type")
        self.assertEqual(inst.certainty[0].certaintySubcomponent[1].rating[0].coding[0].code, "no-concern")
        self.assertEqual(inst.certainty[0].certaintySubcomponent[1].rating[0].coding[0].display, "no serious concern")
        self.assertEqual(inst.certainty[0].certaintySubcomponent[1].rating[0].coding[0].system, "http://terminology.hl7.org/CodeSystem/certainty-subcomponent-rating")
        self.assertEqual(inst.certainty[0].certaintySubcomponent[1].type[0].coding[0].code, "Inconsistency")
        self.assertEqual(inst.certainty[0].certaintySubcomponent[1].type[0].coding[0].display, "Inconsistency")
        self.assertEqual(inst.certainty[0].certaintySubcomponent[1].type[0].coding[0].system, "http://terminology.hl7.org/CodeSystem/certainty-subcomponent-type")
        self.assertEqual(inst.certainty[0].certaintySubcomponent[2].note.text, "Only a small proportion of studies reported longer-term mortality.")
        self.assertEqual(inst.certainty[0].certaintySubcomponent[2].rating[0].coding[0].code, "serious-concern")
        self.assertEqual(inst.certainty[0].certaintySubcomponent[2].rating[0].coding[0].display, "serious concern")
        self.assertEqual(inst.certainty[0].certaintySubcomponent[2].rating[0].coding[0].system, "http://terminology.hl7.org/CodeSystem/certainty-subcomponent-rating")
        self.assertEqual(inst.certainty[0].certaintySubcomponent[2].type[0].coding[0].code, "Indirectness")
        self.assertEqual(inst.certainty[0].certaintySubcomponent[2].type[0].coding[0].display, "Indirectness")
        self.assertEqual(inst.certainty[0].certaintySubcomponent[2].type[0].coding[0].system, "http://terminology.hl7.org/CodeSystem/certainty-subcomponent-type")
        self.assertEqual(inst.certainty[0].certaintySubcomponent[3].note.text, "Confidence interval includes no effect.")
        self.assertEqual(inst.certainty[0].certaintySubcomponent[3].rating[0].coding[0].code, "serious-concern")
        self.assertEqual(inst.certainty[0].certaintySubcomponent[3].rating[0].coding[0].display, "serious concern")
        self.assertEqual(inst.certainty[0].certaintySubcomponent[3].rating[0].coding[0].system, "http://terminology.hl7.org/CodeSystem/certainty-subcomponent-rating")
        self.assertEqual(inst.certainty[0].certaintySubcomponent[3].type[0].coding[0].code, "Imprecision")
        self.assertEqual(inst.certainty[0].certaintySubcomponent[3].type[0].coding[0].display, "Imprecision")
        self.assertEqual(inst.certainty[0].certaintySubcomponent[3].type[0].coding[0].system, "http://terminology.hl7.org/CodeSystem/certainty-subcomponent-type")
        self.assertEqual(inst.certainty[0].certaintySubcomponent[4].rating[0].coding[0].code, "no-concern")
        self.assertEqual(inst.certainty[0].certaintySubcomponent[4].rating[0].coding[0].display, "no serious concern")
        self.assertEqual(inst.certainty[0].certaintySubcomponent[4].rating[0].coding[0].system, "http://terminology.hl7.org/CodeSystem/certainty-subcomponent-rating")
        self.assertEqual(inst.certainty[0].certaintySubcomponent[4].type[0].coding[0].code, "PublicationBias")
        self.assertEqual(inst.certainty[0].certaintySubcomponent[4].type[0].coding[0].display, "Publication bias")
        self.assertEqual(inst.certainty[0].certaintySubcomponent[4].type[0].coding[0].system, "http://terminology.hl7.org/CodeSystem/certainty-subcomponent-type")
        self.assertEqual(inst.certainty[0].description, "Low, due to serious imprecision and indirectness.")
        self.assertEqual(inst.certainty[0].rating[0].coding[0].code, "low")
        self.assertEqual(inst.certainty[0].rating[0].coding[0].display, "Low quality")
        self.assertEqual(inst.certainty[0].rating[0].coding[0].system, "http://terminology.hl7.org/CodeSystem/certainty-rating")
        self.assertEqual(inst.description, "Mortality reduced with RR 0.94 with Corticosteroids vs no corticosteroids for patients with sepsis")
        self.assertEqual(inst.id, "example")
        self.assertEqual(inst.meta.tag[0].code, "HTEST")
        self.assertEqual(inst.meta.tag[0].display, "test health data")
        self.assertEqual(inst.meta.tag[0].system, "http://terminology.hl7.org/CodeSystem/v3-ActReason")
        self.assertEqual(inst.referentGroup.description, "Patients with sepsis")
        self.assertEqual(inst.referentGroup.directnessMatch.coding[0].display, "???")
        self.assertEqual(inst.referentGroup.directnessMatch.coding[0].system, "http://terminology.hl7.org/CodeSystem/directness")
        self.assertEqual(inst.relatedArtifact[0].type, "derived-from")
        self.assertEqual(inst.relatedArtifact[0].url, "https://app.magicapp.org/public/guideline/EZ1w8n/pico/31831/widget?tab=outcome")
        self.assertEqual(inst.statistic[0].attributeEstimate[0].description, "(CI 95% 0.89 - 1.00)")
        self.assertEqual(inst.statistic[0].attributeEstimate[0].level, 0.95)
        self.assertEqual(inst.statistic[0].attributeEstimate[0].range.high.value, 1.0)
        self.assertEqual(inst.statistic[0].attributeEstimate[0].range.low.value, 0.89)
        self.assertEqual(inst.statistic[0].attributeEstimate[0].type.coding[0].code, "C53324")
        self.assertEqual(inst.statistic[0].attributeEstimate[0].type.coding[0].display, "confidence interval")
        self.assertEqual(inst.statistic[0].attributeEstimate[0].type.coding[0].system, "http://terminology.hl7.org/CodeSystem/attribute-estimate-type")
        self.assertEqual(inst.statistic[0].description, "Relative risk 0.94")
        self.assertEqual(inst.statistic[0].note[0].text, "Based on data from 6438 patients in 9 studies ")
        self.assertEqual(inst.statistic[0].quantity.value, 0.94)
        self.assertEqual(inst.statistic[0].sampleSize.note[0].text, "Based on data from 6438 patients in 9 studies ")
        self.assertEqual(inst.statistic[0].sampleSize.numberOfParticipants, 6438)
        self.assertEqual(inst.statistic[0].sampleSize.numberOfStudies, 9)
        self.assertEqual(inst.statistic[0].statisticType.coding[0].code, "C93152")
        self.assertEqual(inst.statistic[0].statisticType.coding[0].display, "relative risk")
        self.assertEqual(inst.statistic[0].statisticType.coding[0].system, "http://terminology.hl7.org/CodeSystem/statistic-type")
        self.assertEqual(inst.statistic[1].attributeEstimate[0].description, "(CI 95% 0.041 - 0.00)")
        self.assertEqual(inst.statistic[1].attributeEstimate[0].range.high.value, 0.041)
        self.assertEqual(inst.statistic[1].attributeEstimate[0].range.low.value, 0)
        self.assertEqual(inst.statistic[1].attributeEstimate[0].type.coding[0].code, "C53324")
        self.assertEqual(inst.statistic[1].attributeEstimate[0].type.coding[0].display, "confidence interval")
        self.assertEqual(inst.statistic[1].attributeEstimate[0].type.coding[0].system, "http://terminology.hl7.org/CodeSystem/attribute-estimate-type")
        self.assertEqual(inst.statistic[1].description, "Absolute risk difference: 22 fewer per 1000")
        self.assertEqual(inst.statistic[1].note[0].text, "Difference: 22 fewer per 1000")
        self.assertEqual(inst.statistic[1].quantity.value, 0.022)
        self.assertEqual(inst.statistic[1].sampleSize.note[0].text, "Based on data from 6438 patients in 9 studies ")
        self.assertEqual(inst.statistic[1].sampleSize.numberOfParticipants, 6438)
        self.assertEqual(inst.statistic[1].sampleSize.numberOfStudies, 9)
        self.assertEqual(inst.statistic[1].statisticType.coding[0].code, "0000424")
        self.assertEqual(inst.statistic[1].statisticType.coding[0].display, "absolute risk difference")
        self.assertEqual(inst.statistic[1].statisticType.coding[0].system, "http://terminology.hl7.org/CodeSystem/statistic-type")
        self.assertEqual(inst.status, "draft")
        self.assertEqual(inst.studyType.coding[0].code, "RCT")
        self.assertEqual(inst.studyType.coding[0].display, "randomized trial")
        self.assertEqual(inst.studyType.coding[0].system, "http://terminology.hl7.org/CodeSystem/study-type")
        self.assertEqual(inst.synthesisType.coding[0].code, "std-MA")
        self.assertEqual(inst.synthesisType.coding[0].display, "summary data meta-analysis")
        self.assertEqual(inst.synthesisType.coding[0].system, "http://terminology.hl7.org/CodeSystem/synthesis-type")
        self.assertEqual(inst.text.status, "generated")
        self.assertEqual(inst.title, "Corticosteroids vs No corticosteroids for Patients with Sepsis with Mortality (60 days to 1 year)")
        self.assertEqual(inst.variableDefinition[0].description, "Mortality Longer term (60 days to 1 year)")
        self.assertEqual(inst.variableDefinition[0].directnessMatch.coding[0].code, "moderate")
        self.assertEqual(inst.variableDefinition[0].directnessMatch.coding[0].display, "moderate")
        self.assertEqual(inst.variableDefinition[0].directnessMatch.coding[0].system, "http://terminology.hl7.org/CodeSystem/directness")
        self.assertEqual(inst.variableDefinition[0].variableRole.coding[0].code, "measuredVariable")
        self.assertEqual(inst.variableDefinition[0].variableRole.coding[0].display, "measured variable")
        self.assertEqual(inst.variableDefinition[0].variableRole.coding[0].system, "http://terminology.hl7.org/CodeSystem/variable-role")
        self.assertEqual(inst.variableDefinition[1].description, "Corticosteroids")
        self.assertEqual(inst.variableDefinition[1].directnessMatch.coding[0].display, "???")
        self.assertEqual(inst.variableDefinition[1].directnessMatch.coding[0].system, "http://terminology.hl7.org/CodeSystem/directness")
        self.assertEqual(inst.variableDefinition[1].variableRole.coding[0].code, "exposure")
        self.assertEqual(inst.variableDefinition[1].variableRole.coding[0].display, "exposure")
        self.assertEqual(inst.variableDefinition[1].variableRole.coding[0].system, "http://terminology.hl7.org/CodeSystem/variable-role")
        self.assertEqual(inst.variableDefinition[2].description, "No corticosteroids")
        self.assertEqual(inst.variableDefinition[2].directnessMatch.coding[0].display, "???")
        self.assertEqual(inst.variableDefinition[2].directnessMatch.coding[0].system, "http://terminology.hl7.org/CodeSystem/directness")
        self.assertEqual(inst.variableDefinition[2].variableRole.coding[0].code, "referenceExposure")
        self.assertEqual(inst.variableDefinition[2].variableRole.coding[0].display, "referenceExposure")
        self.assertEqual(inst.variableDefinition[2].variableRole.coding[0].system, "http://terminology.hl7.org/CodeSystem/variable-role")

if __name__ == '__main__':
    unittest.main()